{"version":3,"sources":["MapBox/Firebase.js","MapBox/Map.js","MapBox/MapboxAPIkey.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","mapboxgl","accessToken","Map","props","mapRef","React","createRef","setstyl","style","state","mapStyle","console","log","map","setStyle","handleStyle","e","setState","target","value","unsubscribe","lng","lat","zoom","geodata","data","bind","this","firestore","collection","doc","get","then","exists","features","forEach","marker","c","properties","CreateDate","o","OpenDate","Marker","mapMarker","setLngLat","geometry","coordinates","setPopup","Popup","offset","setHTML","Id","Name","OpenStat","MaxJoinNum","MinJoinNum","moment","toDate","toDateString","addTo","catch","error","container","mapContainer","center","nav","NavigationControl","addControl","className","role","aria-label","type","onClick","ref","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"0SAeEA,gBAVa,CACXC,OAAQ,0CACRC,WAAY,4BACZC,YAAa,mCACbC,UAAW,YACXC,cAAe,wBACfC,kBAAmB,gBACnBC,MAAO,6CACPC,cAAe,iBAMFR,Q,iBCXjBS,IAASC,YCRkB,wF,IDgKZC,E,kDA/Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAJRC,OAASC,IAAMC,YAGI,EAkBnBC,QAAU,WACR,IAAMC,EAAQ,EAAKC,MAAMC,SACzBC,QAAQC,IAAIJ,GACZ,EAAKK,IAAIC,SAAS,0BAA4BN,IArB7B,EAiGnBO,YAAc,SAACC,GAEb,EAAKC,SAAS,CACZP,SAAUM,EAAEE,OAAOC,SAjGrB,EAAKC,YAAc,KACnB,EAAKX,MAAQ,CACXY,IAAK,EACLC,IAAK,GACLC,KAAM,EACNC,QAAS,GACTd,SAAU,cACVe,KAAM,MAER,EAAKV,YAAc,EAAKA,YAAYW,KAAjB,gBAZF,E,iEAgBjBC,KAAKpB,Y,0CAQc,IAAD,OAClBhB,EACGqC,YACAC,WAAW,gBACXC,IAAI,wBACJC,MACAC,MAAK,SAACF,GACL,GAAIA,EAAIG,OAAQ,CACd,IAAIR,EAAOK,EAAIL,OAEf,EAAKR,SAAS,CAAEQ,KAAMA,IACtBd,QAAQC,IAAI,iBAAkB,EAAKH,MAAMgB,MAEzC,EAAKhB,MAAMgB,KAAKS,SAASC,SAAQ,SAACC,GAChC,IAAMC,EAAID,EAAOE,WAAWC,WACtBC,EAAIJ,EAAOE,WAAWG,SAE5B,IAAIzC,IAAS0C,OAAO,EAAKC,WACtBC,UAAUR,EAAOS,SAASC,aAC1BC,SACC,IAAI/C,IAASgD,MAAM,CAAEC,OAAQ,KAC1BC,QACC,MACEd,EAAOE,WAAWa,GADpB,UAIEf,EAAOE,WAAWc,KAJpB,UAOEhB,EAAOE,WAAWe,SAPpB,UAUEjB,EAAOE,WAAWgB,WAVpB,UAaElB,EAAOE,WAAWiB,WAbpB,UAgBEC,IAAOnB,EAAG,YAAYoB,SAASC,eAhBjC,UAmBEF,IAAOhB,EAAG,YAAYiB,SAASC,eAC/B,SAGPC,MAAM,EAAK9C,aAIhB,EAAKI,SAAS,CAAEQ,KAAM,OACtBd,QAAQC,IAAI,wBAGfgD,OAAM,SAACC,GACN,EAAK5C,SAAS,CAAEQ,KAAM,OACtBd,QAAQC,IAAI,0BAA2BiD,MAG3ClC,KAAKd,IAAM,IAAIb,IAASE,IAAI,CAC1B4D,UAAWnC,KAAKoC,aAGhBvD,MAAO,0BAA4BmB,KAAKlB,MAAMC,SAC9CsD,OAAQ,CAACrC,KAAKlB,MAAMY,IAAKM,KAAKlB,MAAMa,KACpCC,KAAMI,KAAKlB,MAAMc,OAGnB,IAAM0C,EAAM,IAAIjE,IAASkE,kBACzBvC,KAAKd,IAAIsD,WAAWF,GAEpBtC,KAAKpB,Y,+BASG,IAAD,OACP,OACE,6BACE,yBAAK6D,UAAU,eACb,yBAAKA,UAAU,YAAYC,KAAK,QAAQC,aAAW,iBACjD,4BACEC,KAAK,SACLH,UAAU,oBACVjD,MAAM,cACNqD,QAAS,SAACxD,GACR,EAAKD,YAAYC,KALrB,WAUA,4BACEuD,KAAK,SACLH,UAAU,oBACVjD,MAAM,eACNqD,QAAS,SAACxD,GAAD,OAAO,EAAKD,YAAYC,KAJnC,aAQA,4BACEuD,KAAK,SACLH,UAAU,oBACVjD,MAAM,YACNqD,QAAS,SAACxD,GAAD,OAAO,EAAKD,YAAYC,KAJnC,WAWJ,yBAAKyD,IAAK,SAACC,GAAD,OAAS,EAAKX,aAAeW,GAAKN,UAAU,sB,GA7I5C/D,IAAMsE,W,MEDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEd9B,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAM8B,c","file":"static/js/main.059f8c49.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\n// import firestore from 'firebase/firestore'\r\n\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAWCoub6quvjEY-I4sAO3hcTlBEAfaDcc8\",\r\n    authDomain: \"app-6d62c.firebaseapp.com\",\r\n    databaseURL: \"https://app-6d62c.firebaseio.com\",\r\n    projectId: \"app-6d62c\",\r\n    storageBucket: \"app-6d62c.appspot.com\",\r\n    messagingSenderId: \"1075551474912\",\r\n    appId: \"1:1075551474912:web:776b6d2da0cf2d8392ac85\",\r\n    measurementId: \"G-8V8W0JLNRE\"\r\n  };\r\n  firebase.initializeApp(config);\r\n  \r\n\r\n  \r\n  export default firebase;","import React from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"./size.css\";\r\nimport firebase from \"./Firebase\";\r\nimport moment from \"moment\";\r\n// import ReactDOM from \"react-dom\";\r\nimport { MAPBOX_KEY } from \"./MapboxAPIkey\";\r\n\r\nmapboxgl.accessToken = MAPBOX_KEY;\r\n\r\n// const el = document.createElement(\"div\");\r\n// el.className = \"marker\";\r\n// ReactDOM.render(<div className=\"marker\" />, el);\r\nclass Map extends React.Component {\r\n  mapRef = React.createRef();\r\n  map;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.unsubscribe = null;\r\n    this.state = {\r\n      lng: 5,\r\n      lat: 34,\r\n      zoom: 2,\r\n      geodata: [],\r\n      mapStyle: \"streets-v11\",\r\n      data: null,\r\n    };\r\n    this.handleStyle = this.handleStyle.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.setstyl();\r\n  }\r\n  setstyl = () => {\r\n    const style = this.state.mapStyle;\r\n    console.log(style);\r\n    this.map.setStyle(\"mapbox://styles/mapbox/\" + style);\r\n  };\r\n\r\n  componentDidMount() {\r\n    firebase\r\n      .firestore()\r\n      .collection(\"youtubeLinks\")\r\n      .doc(\"IjNLTwdUDVxPafFFRABO\")\r\n      .get()\r\n      .then((doc) => {\r\n        if (doc.exists) {\r\n          let data = doc.data();\r\n\r\n          this.setState({ data: data });\r\n          console.log(\"Document data:\", this.state.data);\r\n\r\n          this.state.data.features.forEach((marker) => {\r\n            const c = marker.properties.CreateDate;\r\n            const o = marker.properties.OpenDate;\r\n            // console.log(\"Doc:\", moment(o, \"YYYYMMDD\").toDate().toDateString());\r\n            new mapboxgl.Marker(this.mapMarker)\r\n              .setLngLat(marker.geometry.coordinates)\r\n              .setPopup(\r\n                new mapboxgl.Popup({ offset: 25 }) // add popups\r\n                  .setHTML(\r\n                    \"<p>\" +\r\n                      marker.properties.Id +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.Name +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.OpenStat +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.MaxJoinNum +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      marker.properties.MinJoinNum +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      moment(c, \"YYYYMMDD\").toDate().toDateString() +\r\n                      \"</p>\" +\r\n                      \"<p>\" +\r\n                      moment(o, \"YYYYMMDD\").toDate().toDateString() +\r\n                      \"</p>\"\r\n                  )\r\n              )\r\n              .addTo(this.map);\r\n          });\r\n        } else {\r\n          // doc.data() will be undefined in this case\r\n          this.setState({ data: null });\r\n          console.log(\"No such document!\");\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        this.setState({ data: null });\r\n        console.log(\"Error getting document:\", error);\r\n      });\r\n\r\n    this.map = new mapboxgl.Map({\r\n      container: this.mapContainer,\r\n      //satellite-v9\r\n      //light-v10\r\n      style: \"mapbox://styles/mapbox/\" + this.state.mapStyle,\r\n      center: [this.state.lng, this.state.lat],\r\n      zoom: this.state.zoom,\r\n    });\r\n\r\n    const nav = new mapboxgl.NavigationControl();\r\n    this.map.addControl(nav);\r\n\r\n    this.setstyl();\r\n  }\r\n\r\n  handleStyle = (e) => {\r\n    // console.log(e.target.value);\r\n    this.setState({\r\n      mapStyle: e.target.value,\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"buttonStyle\">\r\n          <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"streets-v11\"\r\n              onClick={(e) => {\r\n                this.handleStyle(e);\r\n              }}\r\n            >\r\n              streets\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"satellite-v9\"\r\n              onClick={(e) => this.handleStyle(e)}\r\n            >\r\n              satellite\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-secondary\"\r\n              value=\"light-v10\"\r\n              onClick={(e) => this.handleStyle(e)}\r\n            >\r\n              Light\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {/* <div ref={(el) => (this.mapMarker = el)} className=\"marker\" /> */}\r\n        <div ref={(el) => (this.mapContainer = el)} className=\"mapContainer\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Map;\r\n","export const  MAPBOX_KEY = \"pk.eyJ1IjoiNWFhZCIsImEiOiJjazlqeGo4YzUwMnhoM2pxYWQ3Z3gyMW1vIn0.FVlTmXS_ksLqzGwz9VTCdQ\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Map from './MapBox/Map';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Map />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}